tosca_definitions_version: tosca_simple_yaml_1_2
description: This version of the example given TR255C 17.5.0 conformant to TOSCA simple profile 1.2 

repositories:
  tmforum:
    description: >-
      URL where TMForum publishes SID in TOSCA format
    url: https://www.tmforum.org/resources/standard/information-framework-sid-release-xx-x-tosca-format/
    credential:
      user: member
      token: password


imports:
  - file: ../sid.yml
  # would normally refer to external repository but for now it is local so comment it out
  # - repository: tmforum

artifact_types:
  tosca.artifacts.Deployment.Image.VM.QCOW2:
    derived_from: tosca.artifacts.Deployment.Image.VM
    description: QCOW2 format
    # an example of a real, but arbitary, deployable image type 

node_types:
  org.tmforum.tr255c.nodes.firewall:
    description: A type definition of the top level firewall entity from TR255B for use in TR255C
    derived_from: tosca.nodes.org.tmforum.models.sidmodels.ResourceDomain.ResourceABE.CompoundResourceABE.CompoundResource
    # make it a compound resource so that it could be an appliance in the future
    properties:
      operating_system:
        type: string
      # Assume that the user want to specify the operating system, rather than having it allocated and reported
    attributes:
      max_traffic_processed_GBs_per_sec:
        type: integer
      # This attribute is defined in TR255B
    requirements:
      - core_software:
          capability: tosca.capabilities.Root
          node: tosca.nodes.SoftwareComponent.networked
          relationship: DependsOn
      # The firewall always needs the core software
    capabilities:
      CP1: Endpoint
      CP14: Endpoint
      # There are always these two external interfaces

  tosca.nodes.SoftwareComponent.networked:
    derived_from: tosca.nodes.SoftwareComponent
    description: A software component with ports
    # Could have based this on SID softwareSpec but assume orchestrator is easier to implement if we base it on the TOSCA SoftwareComponent
    # Need to derive a node type which is a software component but which has internal network ports 
    requirements:
    - port:
        capability: tosca.capabilities.network.Bindable
        node: tosca.nodes.network.Port
        relationship: tosca.relationships.network.BindsTo

  SWI1:
    derived_from: tosca.nodes.SoftwareComponent.networked
    requirements:
      - CP2:
          capability: tosca.capabilities.Node
          node: tosca.nodes.network.Port
          relationship: DependsOn
      - CP14:
          capability: tosca.capabilities.Node
          node: tosca.nodes.network.Port
          relationship: DependsOn

  SWI1_linux:
    derived_from: SWI1
    interfaces:
        Standard:
          create: my_vm_image
    artifacts:
      my_vm_image:
        file: images/fedora-18-x86_64.qcow2
        type: tosca.artifacts.Deployment.Image.VM.QCOW2

  SWI1_windows:
    derived_from: SWI1
    interfaces:
        Standard:
          create: my_vm_image
    artifacts:
      my_vm_image:
        file: images/windows-10-x86_64.qcow2
        type: tosca.artifacts.Deployment.Image.VM.QCOW2

topology_template:
  description: Virtual Firewall as described in TR255C

  node_templates:
    my_virtualFirewall_linux:
      description: an instance of the TR255B firewall with no extra features on a Linux
    # There would be another node_template for the firewall with no features on Windows platform
    # There would also be additonal node templates to hold the recipe for each feature group on each operating system type
    # The type defintions section could be held in a separate file and shared by each of the different node templates
      type: org.tmforum.tr255c.nodes.firewall
      properties:
        operating_system: linux
      requirements:
        - core_software: 
            node: my_SWI1

    my_SWI1:
      type: SWI1_linux
      properties:
        component_version: 1.0
        admin_credential:
          user: myusername
          token: mypassword
      requirements:
      # Leave it to the orchestrator to find a server but specify the minimum requirements and the type of os specifed by the user as captured in my_virtualFirewall
        - host:
            node: tosca.nodes.Compute
            node_filter:
              properties:
                disk_size: 
                  - greater_or_equal: 10 GB
                num_cpus: 
                  - greater_or_equal: 2
                mem_size: 
                  - greater_or_equal: 4 GB
              capabilities:
                os:
                  properties:
                    type: 
                      - equal: { get_property: my_virtualFirewall, operating_system }
        - port: CP2
        # This is where we add the dependency on CP2
        - port: CP13


    CP2:
      type: tosca.nodes.network.Port
      requirements:
        - link: Link1

    CP13:
      type: tosca.nodes.network.Port
      requirements:
        - link: Link1

    Link1:
      type: tosca.nodes.network.Network
