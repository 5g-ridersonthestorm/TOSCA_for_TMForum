tosca_definitions_version: tosca_simple_yaml_1_0


imports:
  - file: modularRouterProfile.yml



####################
capability_types:
####################



  ####################
  # Capabilities to implement vendor specific features 
  ####################

  Acme.ComplexQosFeature:
    derived_from: tosca.capabilities.Root
    # TODO A capability probably maps to a SID (resource)function so resolve how to derive SID function from tosca capabilities
    description: The ComplexQosFeature capability is an example of how a (vendor specific) feature, when included on a Node Type or Template defintion, indicates that the node can implement that feature
    properties:
      enabled:
        type: boolean
        required: False
        default: False



####################
node_types:
####################

  
      
  ###################
  # node types for Acme modular router
  ###################

  Acme.1111:
  # We are going to use SID PhysicalResourceSpecFurtherExtendedBy in which both vendorName and modelNumber are mandatory
  # and so we derive ACME model 1111 directly from port_card rather than defining an Acme port_card and inheriting from that
    derived_from: org.tmforum.igxxxx.nodes.port_card
    capabilities:
      # Including PhysicalResourceSpecFurtherExtendedBy as I want to specifiy the extended properties
      PhysicalResourceSpecFurtherExtendedBy:
        properties:
          # These are mandatory
          modelNumber: #override
            type: string
            default: "1111"
          vendorName: #override
            type: string
            default: "Acme"
        #attributes:
          # These would not normally be specified in a topology template
          #skuNumber: c
          #partNumber: d

  Acme.2222:
    derived_from: org.tmforum.igxxxx.nodes.processor_card
    capabilities:
      # Including PhysicalResourceSpecFurtherExtendedBy as I want to specifiy the extended properties
      PhysicalResourceSpecFurtherExtendedBy:
        properties:
          # These are mandatory
          modelNumber: #override
            type: string
            default: "1111"
          vendorName: #override
            type: string
            default: "Acme"
        #attributes:
          # These would not normally be specified in a topology template
          #skuNumber: c
          #partNumber: d

  org.tmforum.igxxxx.nodes.RouterSoftware.Acme:
    derived_from: org.tmforum.igxxxx.nodes.RouterSoftware

  org.tmforum.igxxxx.nodes.PhysicalPort.OnCard.Acme:
    derived_from: org.tmforum.igxxxx.nodes.PhysicalPort.OnCard
    # requirements:
    #   - router_software:
    #       # This is one way of specifying the dependancy is on type of Acme
    #       node: org.tmforum.igxxxx.nodes.RouterSoftware.Acme
    #   - port_card:
    #       node: org.tmforum.igxxxx.nodes.port_card
    #       # This is maybe another way of specifying the dependancy is on type of Acme but fails validation
    #       # TODO resolve or remove
    #       # node_filter:
    #       # - port_card:
    #       #     properties:
    #       #       vendorName: { equal: Acme }
    #       # relationship: dependancy

  RouterSoftware.Acme:
    derived_from: org.tmforum.igxxxx.nodes.RouterSoftware

  Acme.Router.1000Series:
    derived_from: org.tmforum.igxxxx.nodes.ModularRouter
    interfaces:
      Standard:
        create: scripts/invoke_installation_job.sh
        configure: scripts/apply_day0_config.sh
        # Note that there is no script here for set_paused, we could do so but in thsi example we assume that some external action occurs when we set the lrStatus value
        # Note that there is no script here for stop for the same reasons
        delete: scripts/invoke_recovery_job.sh

  ###################
  # node types to add the advanced QoS feature
  ###################

  org.tmforum.igxxxx.nodes.PhysicalPort.OnCard.Acme.Advanced:
    derived_from: org.tmforum.igxxxx.nodes.PhysicalPort.OnCard.Acme
    capabilities: 
      complexQoS:
        type: Acme.ComplexQosFeature
      
    # Other Avanced features may be listed as subsequent capabilities


####################
description: >-
  Template for physical router within a tosca node.network
topology_template:
####################
  node_templates:

    # my_port:
    #   type: org.tmforum.igxxxx.nodes.PhysicalPort.OnCard.Acme.Advanced
    #   capabilities:
    #     complexQoS: 
    #       properties:
    #         enabled: True

    my_router:
      type: Acme.Router.1000Series
      properties:
        property1: a
        property2: 1
      attributes:
        attribute1: 2.0
        attribute2: true

  workflows:
    create_router:
      steps:
        install_router:
          target: my_router
          activities:
            - set_state: creating # This is a TOSCA Normative node state value
            - call_operation: Standard.create #The Standard interface action of create 
            - set_state: created # This is a TOSCA Normative node state value
        configure_router:
          target: my_router
          activities:
            - set_state: configuring # This is a TOSCA Normative node state value
            - call_operation: Standard.configure #The Standard interface action of configure 
            - set_state: configured # This is a TOSCA Normative node state value
    delete_router:
      steps:
        cost_out_routes:
          target: my_router
          activities:
            - set_state: stopping
            - call_operation: Standard.set_paused #Use the extended lifecycle operation to tell orchestrator to set the SID entity CompoundResource.status to a value of Paused. Which may invoke external actions 
            # set_state not used here as stopping does not complete until the router is shutdown
            # could do 'set_state: Paused' but is doesn't seem to have any value so in this example set_state values are limited to the normative node state values
        shutdown_router:
          target: my_router
          activities:
            - call_operation: Standard.stop # Stop is a standard lifecycle but again setting CompoundResource.status to Stopped triggers any necessary external action
            - set_state: configured
        recover_router:
          target: my_router
          activities:
            - set_state: deleting
            - call_operation: Standard.delete #The Standard interface action of delete 
            - set_state: initial





    
