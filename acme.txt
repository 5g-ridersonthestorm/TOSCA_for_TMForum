description: Template for physical router within a tosca node.network
nodeTemplates:
  db_server:
    description: The TOSCA Compute node represents one or more real or virtual processors
      of software applications or services along with other essential local resources.
      Collectively, the resources the compute node represents can logically be viewed
      as a (real or virtual) "server".
    types:
      tosca.nodes.Compute:
        metadata:
          citation: '[TOSCA-Simple-Profile-YAML-v1.1]'
          citation_location: 5.9.2
          normative: "true"
      tosca.nodes.Root:
        metadata:
          citation: '[TOSCA-Simple-Profile-YAML-v1.1]'
          citation_location: 5.9.1
          normative: "true"
    directives: []
    properties: {}
    attributes:
      networks:
        value: null
        constraints: []
        description: The list of logical networks assigned to the compute host instance
          and information about them.
      ports:
        value: null
        constraints: []
        description: The list of logical ports assigned to the compute host instance
          and information about them.
      private_address:
        value: null
        constraints: []
        description: The primary private IP address assigned by the cloud provider
          that applications may use to access the Compute node.
      public_address:
        value: null
        constraints: []
        description: The primary public IP address assigned by the cloud provider
          that applications may use to access the Compute node.
      state:
        value: initial
        constraints: []
        description: The state of the node instance.
      tosca_id:
        value: null
        constraints: []
        description: A unique identifier of the realized instance of a Node Template
          that derives from any TOSCA normative type.
      tosca_name:
        value: null
        constraints: []
        description: This attribute reflects the name of the Node Template as defined
          in the TOSCA service template. This name is not unique to the realized instance
          model of corresponding deployed application as each template in the model
          can result in one or more instances (e.g., scaled) when orchestrated to
          a provider environment.
    requirements: []
    capabilities:
      binding:
        description: A node type that includes the Bindable capability indicates that
          it can be bound to a logical network association via a network port.
        types:
          tosca.capabilities.Node:
            metadata:
              citation: '[TOSCA-Simple-Profile-YAML-v1.1]'
              citation_location: 5.5.2
              normative: "true"
              role: feature
          tosca.capabilities.Root:
            metadata:
              citation: '[TOSCA-Simple-Profile-YAML-v1.1]'
              citation_location: 5.5.1
              normative: "true"
          tosca.capabilities.network.Bindable:
            metadata:
              citation: '[TOSCA-Simple-Profile-YAML-v1.1]'
              citation_location: 5.5.14
              normative: "true"
        properties: {}
        attributes: {}
        minRelationshipCount: 0
        maxRelationshipCount: -1
      endpoint:
        description: This is the default TOSCA type that should be used or extended
          to define a specialized administrator endpoint capability.
        types:
          tosca.capabilities.Endpoint:
            metadata:
              citation: '[TOSCA-Simple-Profile-YAML-v1.1]'
              citation_location: 5.5.7
              normative: "true"
          tosca.capabilities.Endpoint.Admin:
            metadata:
              citation: '[TOSCA-Simple-Profile-YAML-v1.1]'
              citation_location: 5.5.9
              normative: "true"
          tosca.capabilities.Root:
            metadata:
              citation: '[TOSCA-Simple-Profile-YAML-v1.1]'
              citation_location: 5.5.1
              normative: "true"
        properties:
          initiator:
            value: source
            constraints: []
            description: The optional indicator of the direction of the connection.
          network_name:
            value: PRIVATE
            constraints: []
            description: 'The optional name (or ID) of the network this endpoint should
              be bound to. network_name: PRIVATE | PUBLIC | <network_name> | <network_id>.'
          protocol:
            value: tcp
            constraints: []
            description: 'The name of the protocol (i.e., the protocol prefix) that
              the endpoint accepts (any OSI Layer 4-7 protocols). Examples: http,
              https, ftp, tcp, udp, etc.'
          secure:
            value: true
            constraints: []
            description: Requests for the endpoint to be secure and use credentials
              supplied on the ConnectsTo relationship.
        attributes:
          ip_address:
            value: null
            constraints: []
            description: 'Note: This is the IP address as propagated up by the associated
              node''s host (Compute) container.'
        minRelationshipCount: 0
        maxRelationshipCount: -1
      feature:
        description: The Node capability indicates the base capabilities of a TOSCA
          Node Type.
        types:
          tosca.capabilities.Node:
            metadata:
              citation: '[TOSCA-Simple-Profile-YAML-v1.1]'
              citation_location: 5.5.2
              normative: "true"
              role: feature
          tosca.capabilities.Root:
            metadata:
              citation: '[TOSCA-Simple-Profile-YAML-v1.1]'
              citation_location: 5.5.1
              normative: "true"
        properties: {}
        attributes: {}
        minRelationshipCount: 0
        maxRelationshipCount: -1
      host:
        description: The Container capability, when included on a Node Type or Template
          definition, indicates that the node can act as a container for (or a host
          for) one or more other declared Node Types.
        types:
          tosca.capabilities.Compute:
            metadata:
              citation: '[TOSCA-Simple-Profile-YAML-v1.1]'
              citation_location: 5.5.3
              normative: "true"
              role: host
          tosca.capabilities.Container:
            metadata:
              citation: '[TOSCA-Simple-Profile-YAML-v1.1]'
              citation_location: 5.5.6
              normative: "true"
          tosca.capabilities.Root:
            metadata:
              citation: '[TOSCA-Simple-Profile-YAML-v1.1]'
              citation_location: 5.5.1
              normative: "true"
        properties:
          disk_size:
            value:
              $number: 10000000000
              $string: 10000000000 B
              scalar: 10
              unit: GB
            constraints:
            - function:
                path: topology_template.node_templates["db_server"].capabilities["host"].properties["disk_size"]
                name: greater_or_equal
                arguments:
                - value:
                    $number: 0
                    $string: 0 B
                    scalar: 0
                    unit: MB
                  constraints: []
                  description: ""
              constraints: []
              description: ""
            description: Size of the local disk available to applications running
              on the Compute node (default unit is MB).
          mem_size:
            value:
              $number: 4096000000
              $string: 4096000000 B
              scalar: 4096
              unit: MB
            constraints:
            - function:
                path: topology_template.node_templates["db_server"].capabilities["host"].properties["mem_size"]
                name: greater_or_equal
                arguments:
                - value:
                    $number: 0
                    $string: 0 B
                    scalar: 0
                    unit: MB
                  constraints: []
                  description: ""
              constraints: []
              description: ""
            description: Size of memory available to applications running on the Compute
              node (default unit is MB).
          num_cpus:
            value: 1
            constraints:
            - function:
                path: topology_template.node_templates["db_server"].capabilities["host"].properties["num_cpus"]
                name: greater_or_equal
                arguments:
                - value: 1
                  constraints: []
                  description: ""
              constraints: []
              description: ""
            description: Number of (actual or virtual) CPUs associated with the Compute
              node.
        attributes: {}
        minRelationshipCount: 0
        maxRelationshipCount: -1
      os:
        description: This is the default TOSCA type that should be used to express
          an Operating System capability for a node.
        types:
          tosca.capabilities.OperatingSystem:
            metadata:
              citation: '[TOSCA-Simple-Profile-YAML-v1.1]'
              citation_location: 5.5.12
              normative: "true"
          tosca.capabilities.Root:
            metadata:
              citation: '[TOSCA-Simple-Profile-YAML-v1.1]'
              citation_location: 5.5.1
              normative: "true"
        properties:
          architecture:
            value: x86_64
            constraints: []
            description: 'The Operating System (OS) architecture. Examples of valid
              values include: x86_32, x86_64, etc.'
          distribution:
            value: rhel
            constraints: []
            description: 'The Operating System (OS) distribution. Examples of valid
              values for a "type" of "Linux" would include: debian, fedora, rhel and
              ubuntu.'
          type:
            value: linux
            constraints: []
            description: 'The Operating System (OS) type. Examples of valid values
              include: linux, aix, mac, windows, etc.'
          version:
            value:
              $string: "6.5"
              major: 6
              minor: 5
              fix: 0
              qualifier: ""
              build: 0
            constraints: []
            description: The Operating System version.
        attributes: {}
        minRelationshipCount: 0
        maxRelationshipCount: -1
      scalable:
        description: This is the default TOSCA type that should be used to express
          a scalability capability for a node.
        types:
          tosca.capabilities.Root:
            metadata:
              citation: '[TOSCA-Simple-Profile-YAML-v1.1]'
              citation_location: 5.5.1
              normative: "true"
          tosca.capabilities.Scalable:
            metadata:
              citation: '[TOSCA-Simple-Profile-YAML-v1.1]'
              citation_location: 5.5.13
              normative: "true"
        properties:
          max_instances:
            value: 1
            constraints: []
            description: This property is used to indicate the maximum number of instances
              that should be created for the associated TOSCA Node Template by a TOSCA
              orchestrator.
          min_instances:
            value: 1
            constraints: []
            description: This property is used to indicate the minimum number of instances
              that should be created for the associated TOSCA Node Template by a TOSCA
              orchestrator.
        attributes: {}
        minRelationshipCount: 0
        maxRelationshipCount: -1
    interfaces:
      Standard:
        description: This lifecycle interface defines the essential, normative operations
          that TOSCA nodes may support.
        types:
          tosca.interfaces.Root:
            metadata:
              citation: '[TOSCA-Simple-Profile-YAML-v1.1]'
              citation_location: 5.8.3
              normative: "true"
          tosca.interfaces.node.lifecycle.Standard:
            metadata:
              citation: '[TOSCA-Simple-Profile-YAML-v1.1]'
              citation_location: 5.8.4
              normative: "true"
        inputs: {}
        operations:
          configure:
            description: Standard lifecycle configure operation.
            implementation: ""
            dependencies: []
            inputs: {}
            timeout: -1
            host: ""
          create:
            description: Standard lifecycle create operation.
            implementation: ""
            dependencies: []
            inputs: {}
            timeout: -1
            host: ""
          delete:
            description: Standard lifecycle delete operation.
            implementation: ""
            dependencies: []
            inputs: {}
            timeout: -1
            host: ""
          start:
            description: Standard lifecycle start operation.
            implementation: ""
            dependencies: []
            inputs: {}
            timeout: -1
            host: ""
          stop:
            description: Standard lifecycle stop operation.
            implementation: ""
            dependencies: []
            inputs: {}
            timeout: -1
            host: ""
    artifacts: {}
  my_example.node.for.enumeration:
    description: The TOSCA Compute node represents one or more real or virtual processors
      of software applications or services along with other essential local resources.
      Collectively, the resources the compute node represents can logically be viewed
      as a (real or virtual) "server".
    types:
      example.node.for.enumeration:
        metadata: {}
      tosca.nodes.Compute:
        metadata:
          citation: '[TOSCA-Simple-Profile-YAML-v1.1]'
          citation_location: 5.9.2
          normative: "true"
      tosca.nodes.Root:
        metadata:
          citation: '[TOSCA-Simple-Profile-YAML-v1.1]'
          citation_location: 5.9.1
          normative: "true"
    directives: []
    properties:
      somereportperiod:
        value: 1R_15MNxxxyy
        constraints:
        - function:
            path: topology_template.node_templates["my_example.node.for.enumeration"].properties["somereportperiod"]
            name: valid_values
            arguments:
            - map:
                NA:
                  value: null
                  constraints: []
                  description: ""
              constraints: []
              description: ""
            - map:
                R_15MN:
                  value: null
                  constraints: []
                  description: ""
              constraints: []
              description: ""
            - map:
                R_1H:
                  value: null
                  constraints: []
                  description: ""
              constraints: []
              description: ""
            - map:
                R_1MN R_1MN:
                  value: null
                  constraints: []
                  description: ""
              constraints: []
              description: ""
            - map:
                R_24H R_24H:
                  value: null
                  constraints: []
                  description: ""
              constraints: []
              description: ""
            - map:
                R_30MN R_30MN:
                  value: null
                  constraints: []
                  description: ""
              constraints: []
              description: ""
            - map:
                R_5MN R_5MN:
                  value: null
                  constraints: []
                  description: ""
              constraints: []
              description: ""
          constraints: []
          description: ""
        description: ""
    attributes:
      networks:
        value: null
        constraints: []
        description: The list of logical networks assigned to the compute host instance
          and information about them.
      ports:
        value: null
        constraints: []
        description: The list of logical ports assigned to the compute host instance
          and information about them.
      private_address:
        value: null
        constraints: []
        description: The primary private IP address assigned by the cloud provider
          that applications may use to access the Compute node.
      public_address:
        value: null
        constraints: []
        description: The primary public IP address assigned by the cloud provider
          that applications may use to access the Compute node.
      state:
        value: initial
        constraints: []
        description: The state of the node instance.
      tosca_id:
        value: null
        constraints: []
        description: A unique identifier of the realized instance of a Node Template
          that derives from any TOSCA normative type.
      tosca_name:
        value: null
        constraints: []
        description: This attribute reflects the name of the Node Template as defined
          in the TOSCA service template. This name is not unique to the realized instance
          model of corresponding deployed application as each template in the model
          can result in one or more instances (e.g., scaled) when orchestrated to
          a provider environment.
    requirements: []
    capabilities:
      binding:
        description: A node type that includes the Bindable capability indicates that
          it can be bound to a logical network association via a network port.
        types:
          tosca.capabilities.Node:
            metadata:
              citation: '[TOSCA-Simple-Profile-YAML-v1.1]'
              citation_location: 5.5.2
              normative: "true"
              role: feature
          tosca.capabilities.Root:
            metadata:
              citation: '[TOSCA-Simple-Profile-YAML-v1.1]'
              citation_location: 5.5.1
              normative: "true"
          tosca.capabilities.network.Bindable:
            metadata:
              citation: '[TOSCA-Simple-Profile-YAML-v1.1]'
              citation_location: 5.5.14
              normative: "true"
        properties: {}
        attributes: {}
        minRelationshipCount: 0
        maxRelationshipCount: -1
      endpoint:
        description: This is the default TOSCA type that should be used or extended
          to define a specialized administrator endpoint capability.
        types:
          tosca.capabilities.Endpoint:
            metadata:
              citation: '[TOSCA-Simple-Profile-YAML-v1.1]'
              citation_location: 5.5.7
              normative: "true"
          tosca.capabilities.Endpoint.Admin:
            metadata:
              citation: '[TOSCA-Simple-Profile-YAML-v1.1]'
              citation_location: 5.5.9
              normative: "true"
          tosca.capabilities.Root:
            metadata:
              citation: '[TOSCA-Simple-Profile-YAML-v1.1]'
              citation_location: 5.5.1
              normative: "true"
        properties:
          initiator:
            value: source
            constraints: []
            description: The optional indicator of the direction of the connection.
          network_name:
            value: PRIVATE
            constraints: []
            description: 'The optional name (or ID) of the network this endpoint should
              be bound to. network_name: PRIVATE | PUBLIC | <network_name> | <network_id>.'
          protocol:
            value: tcp
            constraints: []
            description: 'The name of the protocol (i.e., the protocol prefix) that
              the endpoint accepts (any OSI Layer 4-7 protocols). Examples: http,
              https, ftp, tcp, udp, etc.'
          secure:
            value: true
            constraints: []
            description: Requests for the endpoint to be secure and use credentials
              supplied on the ConnectsTo relationship.
        attributes:
          ip_address:
            value: null
            constraints: []
            description: 'Note: This is the IP address as propagated up by the associated
              node''s host (Compute) container.'
        minRelationshipCount: 0
        maxRelationshipCount: -1
      feature:
        description: The Node capability indicates the base capabilities of a TOSCA
          Node Type.
        types:
          tosca.capabilities.Node:
            metadata:
              citation: '[TOSCA-Simple-Profile-YAML-v1.1]'
              citation_location: 5.5.2
              normative: "true"
              role: feature
          tosca.capabilities.Root:
            metadata:
              citation: '[TOSCA-Simple-Profile-YAML-v1.1]'
              citation_location: 5.5.1
              normative: "true"
        properties: {}
        attributes: {}
        minRelationshipCount: 0
        maxRelationshipCount: -1
      host:
        description: The Container capability, when included on a Node Type or Template
          definition, indicates that the node can act as a container for (or a host
          for) one or more other declared Node Types.
        types:
          tosca.capabilities.Compute:
            metadata:
              citation: '[TOSCA-Simple-Profile-YAML-v1.1]'
              citation_location: 5.5.3
              normative: "true"
              role: host
          tosca.capabilities.Container:
            metadata:
              citation: '[TOSCA-Simple-Profile-YAML-v1.1]'
              citation_location: 5.5.6
              normative: "true"
          tosca.capabilities.Root:
            metadata:
              citation: '[TOSCA-Simple-Profile-YAML-v1.1]'
              citation_location: 5.5.1
              normative: "true"
        properties: {}
        attributes: {}
        minRelationshipCount: 0
        maxRelationshipCount: -1
      os:
        description: This is the default TOSCA type that should be used to express
          an Operating System capability for a node.
        types:
          tosca.capabilities.OperatingSystem:
            metadata:
              citation: '[TOSCA-Simple-Profile-YAML-v1.1]'
              citation_location: 5.5.12
              normative: "true"
          tosca.capabilities.Root:
            metadata:
              citation: '[TOSCA-Simple-Profile-YAML-v1.1]'
              citation_location: 5.5.1
              normative: "true"
        properties: {}
        attributes: {}
        minRelationshipCount: 0
        maxRelationshipCount: -1
      scalable:
        description: This is the default TOSCA type that should be used to express
          a scalability capability for a node.
        types:
          tosca.capabilities.Root:
            metadata:
              citation: '[TOSCA-Simple-Profile-YAML-v1.1]'
              citation_location: 5.5.1
              normative: "true"
          tosca.capabilities.Scalable:
            metadata:
              citation: '[TOSCA-Simple-Profile-YAML-v1.1]'
              citation_location: 5.5.13
              normative: "true"
        properties:
          max_instances:
            value: 1
            constraints: []
            description: This property is used to indicate the maximum number of instances
              that should be created for the associated TOSCA Node Template by a TOSCA
              orchestrator.
          min_instances:
            value: 1
            constraints: []
            description: This property is used to indicate the minimum number of instances
              that should be created for the associated TOSCA Node Template by a TOSCA
              orchestrator.
        attributes: {}
        minRelationshipCount: 0
        maxRelationshipCount: -1
    interfaces:
      Standard:
        description: This lifecycle interface defines the essential, normative operations
          that TOSCA nodes may support.
        types:
          tosca.interfaces.Root:
            metadata:
              citation: '[TOSCA-Simple-Profile-YAML-v1.1]'
              citation_location: 5.8.3
              normative: "true"
          tosca.interfaces.node.lifecycle.Standard:
            metadata:
              citation: '[TOSCA-Simple-Profile-YAML-v1.1]'
              citation_location: 5.8.4
              normative: "true"
        inputs: {}
        operations:
          configure:
            description: Standard lifecycle configure operation.
            implementation: ""
            dependencies: []
            inputs: {}
            timeout: -1
            host: ""
          create:
            description: Standard lifecycle create operation.
            implementation: ""
            dependencies: []
            inputs: {}
            timeout: -1
            host: ""
          delete:
            description: Standard lifecycle delete operation.
            implementation: ""
            dependencies: []
            inputs: {}
            timeout: -1
            host: ""
          start:
            description: Standard lifecycle start operation.
            implementation: ""
            dependencies: []
            inputs: {}
            timeout: -1
            host: ""
          stop:
            description: Standard lifecycle stop operation.
            implementation: ""
            dependencies: []
            inputs: {}
            timeout: -1
            host: ""
    artifacts: {}
  my_router:
    description: The TOSCA Root Node Type is the default type that all other TOSCA
      base Node Types derive from. This allows for all TOSCA nodes to have a consistent
      set of features for modeling and management (e.g., consistent definitions for
      requirements, capabilities and lifecycle interfaces).
    types:
      Acme.Router.1000Series:
        metadata: {}
      org.tmforum.igxxxx.nodes.ModularRouter:
        metadata: {}
      tosca.nodes.Root:
        metadata:
          citation: '[TOSCA-Simple-Profile-YAML-v1.1]'
          citation_location: 5.9.1
          normative: "true"
      tosca.nodes.org.tmforum.models:
        metadata: {}
      tosca.nodes.org.tmforum.models.sidmodels:
        metadata:
          sid_release: "19.0"
      tosca.nodes.org.tmforum.models.sidmodels.ResourceDomain:
        metadata:
          sid_release: "19.0"
      tosca.nodes.org.tmforum.models.sidmodels.ResourceDomain.ResourceABE:
        metadata:
          sid_release: "19.0"
      tosca.nodes.org.tmforum.models.sidmodels.ResourceDomain.ResourceABE.CompoundResourceABE:
        metadata:
          sid_release: "19.0"
      tosca.nodes.org.tmforum.models.sidmodels.ResourceDomain.ResourceABE.CompoundResourceABE.CompoundResource:
        metadata:
          sid_release: "19.0"
      tosca.nodes.tmforum:
        metadata: {}
    directives: []
    properties:
      property1:
        value: a
        constraints: []
        description: ""
      property2:
        value: 1
        constraints: []
        description: ""
    attributes:
      attribute1:
        value: 2
        constraints: []
        description: ""
      attribute2:
        value: true
        constraints: []
        description: ""
      state:
        value: initial
        constraints: []
        description: The state of the node instance.
      status:
        value: null
        constraints: []
        description: |-
          This is an enumerated integer whose value indicates the current status of the object. The following values are defined: 0: Unknown 1: OK 2: Initializing 3: Starting 4: Paused 5: Stopping 6: Stopped 7: Degraded 8: Stressed 9: Predicted Failure 10: Error - General 11: Error - Non Recoverable 12: Not Installed or Not Present 13: In Maintenance 14: Unable To Contact 15: Lost Communications
          Stopped indicates that the CompoundResource is known to still exist, but it is no longer operational. However, it has not failed.
          Stressed indicates that the LogicalResource is functioning, but needs attention (e.g., it may be overheating, or overloaded in some way). This is similar to Predicted Failure, which indicates that this CompoundResource is functioning properly, but is predicting a failure in the near future.
          In Maintenance indicates that this LogicalResource is being configured, maintained, or otherwise administered and is NOT available for service
      tosca_id:
        value: null
        constraints: []
        description: A unique identifier of the realized instance of a Node Template
          that derives from any TOSCA normative type.
      tosca_name:
        value: null
        constraints: []
        description: This attribute reflects the name of the Node Template as defined
          in the TOSCA service template. This name is not unique to the realized instance
          model of corresponding deployed application as each template in the model
          can result in one or more instances (e.g., scaled) when orchestrated to
          a provider environment.
    requirements:
    - name: chassis
      capabilityTypeName: tosca.capabilities.Root
      capabilityName: ""
      nodeTypeName: org.tmforum.igxxxx.nodes.chassis
      nodeTemplateName: ""
      nodeTemplatePropertyConstraints: {}
      capabilityPropertyConstraints: {}
      relationship:
        description: This type represents a general dependency relationship between
          two nodes.
        types:
          tosca.relationships.DependsOn:
            metadata:
              citation: '[TOSCA-Simple-Profile-YAML-v1.1]'
              citation_location: 5.7.2
              normative: "true"
          tosca.relationships.Root:
            metadata:
              citation: '[TOSCA-Simple-Profile-YAML-v1.1]'
              citation_location: 5.7.1
              normative: "true"
        properties: {}
        attributes:
          state:
            value: initial
            constraints: []
            description: The state of the relationship instance.
          tosca_id:
            value: null
            constraints: []
            description: A unique identifier of the realized instance of a Relationship
              Template that derives from any TOSCA normative type.
          tosca_name:
            value: null
            constraints: []
            description: This attribute reflects the name of the Relationship Template
              as defined in the TOSCA service template. This name is not unique to
              the realized instance model of corresponding deployed application as
              each template in the model can result in one or more instances (e.g.,
              scaled) when orchestrated to a provider environment.
        interfaces:
          Configure:
            description: The lifecycle interfaces define the essential, normative
              operations that each TOSCA Relationship Types may support.
            types:
              tosca.interfaces.Root:
                metadata:
                  citation: '[TOSCA-Simple-Profile-YAML-v1.1]'
                  citation_location: 5.8.3
                  normative: "true"
              tosca.interfaces.relationship.Configure:
                metadata:
                  citation: '[TOSCA-Simple-Profile-YAML-v1.1]'
                  citation_location: 5.8.5
                  normative: "true"
            inputs: {}
            operations:
              add_source:
                description: Operation to notify the target node of a source node
                  which is now available via a relationship.
                implementation: ""
                dependencies: []
                inputs: {}
                timeout: -1
                host: ""
              add_target:
                description: Operation to notify the source node of a target node
                  being added via a relationship.
                implementation: ""
                dependencies: []
                inputs: {}
                timeout: -1
                host: ""
              post_configure_source:
                description: Operation to post-configure the source endpoint.
                implementation: ""
                dependencies: []
                inputs: {}
                timeout: -1
                host: ""
              post_configure_target:
                description: Operation to post-configure the target endpoint.
                implementation: ""
                dependencies: []
                inputs: {}
                timeout: -1
                host: ""
              pre_configure_source:
                description: Operation to pre-configure the source endpoint.
                implementation: ""
                dependencies: []
                inputs: {}
                timeout: -1
                host: ""
              pre_configure_target:
                description: Operation to pre-configure the target endpoint.
                implementation: ""
                dependencies: []
                inputs: {}
                timeout: -1
                host: ""
              remove_source:
                description: Operation to remove the source node.
                implementation: ""
                dependencies: []
                inputs: {}
                timeout: -1
                host: ""
              remove_target:
                description: Operation to remove a target node.
                implementation: ""
                dependencies: []
                inputs: {}
                timeout: -1
                host: ""
              target_changed:
                description: Operation to notify source some property or attribute
                  of the target changed
                implementation: ""
                dependencies: []
                inputs: {}
                timeout: -1
                host: ""
      path: topology_template.node_templates["my_router"].requirements[0]
    - name: router_software
      capabilityTypeName: tosca.capabilities.Root
      capabilityName: ""
      nodeTypeName: org.tmforum.igxxxx.nodes.RouterSoftware
      nodeTemplateName: ""
      nodeTemplatePropertyConstraints: {}
      capabilityPropertyConstraints: {}
      relationship:
        description: This type represents a general dependency relationship between
          two nodes.
        types:
          tosca.relationships.DependsOn:
            metadata:
              citation: '[TOSCA-Simple-Profile-YAML-v1.1]'
              citation_location: 5.7.2
              normative: "true"
          tosca.relationships.Root:
            metadata:
              citation: '[TOSCA-Simple-Profile-YAML-v1.1]'
              citation_location: 5.7.1
              normative: "true"
        properties: {}
        attributes:
          state:
            value: initial
            constraints: []
            description: The state of the relationship instance.
          tosca_id:
            value: null
            constraints: []
            description: A unique identifier of the realized instance of a Relationship
              Template that derives from any TOSCA normative type.
          tosca_name:
            value: null
            constraints: []
            description: This attribute reflects the name of the Relationship Template
              as defined in the TOSCA service template. This name is not unique to
              the realized instance model of corresponding deployed application as
              each template in the model can result in one or more instances (e.g.,
              scaled) when orchestrated to a provider environment.
        interfaces:
          Configure:
            description: The lifecycle interfaces define the essential, normative
              operations that each TOSCA Relationship Types may support.
            types:
              tosca.interfaces.Root:
                metadata:
                  citation: '[TOSCA-Simple-Profile-YAML-v1.1]'
                  citation_location: 5.8.3
                  normative: "true"
              tosca.interfaces.relationship.Configure:
                metadata:
                  citation: '[TOSCA-Simple-Profile-YAML-v1.1]'
                  citation_location: 5.8.5
                  normative: "true"
            inputs: {}
            operations:
              add_source:
                description: Operation to notify the target node of a source node
                  which is now available via a relationship.
                implementation: ""
                dependencies: []
                inputs: {}
                timeout: -1
                host: ""
              add_target:
                description: Operation to notify the source node of a target node
                  being added via a relationship.
                implementation: ""
                dependencies: []
                inputs: {}
                timeout: -1
                host: ""
              post_configure_source:
                description: Operation to post-configure the source endpoint.
                implementation: ""
                dependencies: []
                inputs: {}
                timeout: -1
                host: ""
              post_configure_target:
                description: Operation to post-configure the target endpoint.
                implementation: ""
                dependencies: []
                inputs: {}
                timeout: -1
                host: ""
              pre_configure_source:
                description: Operation to pre-configure the source endpoint.
                implementation: ""
                dependencies: []
                inputs: {}
                timeout: -1
                host: ""
              pre_configure_target:
                description: Operation to pre-configure the target endpoint.
                implementation: ""
                dependencies: []
                inputs: {}
                timeout: -1
                host: ""
              remove_source:
                description: Operation to remove the source node.
                implementation: ""
                dependencies: []
                inputs: {}
                timeout: -1
                host: ""
              remove_target:
                description: Operation to remove a target node.
                implementation: ""
                dependencies: []
                inputs: {}
                timeout: -1
                host: ""
              target_changed:
                description: Operation to notify source some property or attribute
                  of the target changed
                implementation: ""
                dependencies: []
                inputs: {}
                timeout: -1
                host: ""
      path: topology_template.node_templates["my_router"].requirements[1]
    capabilities:
      feature:
        description: The Node capability indicates the base capabilities of a TOSCA
          Node Type.
        types:
          tosca.capabilities.Node:
            metadata:
              citation: '[TOSCA-Simple-Profile-YAML-v1.1]'
              citation_location: 5.5.2
              normative: "true"
              role: feature
          tosca.capabilities.Root:
            metadata:
              citation: '[TOSCA-Simple-Profile-YAML-v1.1]'
              citation_location: 5.5.1
              normative: "true"
        properties: {}
        attributes: {}
        minRelationshipCount: 0
        maxRelationshipCount: -1
    interfaces:
      Standard:
        description: org.tmforum.models.sidmodels.ResourceDomain.ResourceABE.CompoundResourceABE.CompoundResource.status
        types:
          tosca.interfaces.Root:
            metadata:
              citation: '[TOSCA-Simple-Profile-YAML-v1.1]'
              citation_location: 5.8.3
              normative: "true"
          tosca.interfaces.node.lifecycle.Standard:
            metadata:
              citation: '[TOSCA-Simple-Profile-YAML-v1.1]'
              citation_location: 5.8.4
              normative: "true"
          ? tosca.interfaces.node.lifecycle.org.tmforum.models.sidmodels.ResourceDomain.ResourceABE.CompoundResourceABE.CompoundResource.status
          : metadata:
              sid_release: "19.0"
        inputs: {}
        operations:
          configure:
            description: Standard lifecycle configure operation.
            implementation: ""
            dependencies: []
            inputs: {}
            timeout: -1
            host: ""
          create:
            description: '13: In Maintenance'
            implementation: ""
            dependencies: []
            inputs: {}
            timeout: -1
            host: ""
          delete:
            description: '12: Not Installed or Not Present'
            implementation: ""
            dependencies: []
            inputs: {}
            timeout: -1
            host: ""
          set_Lost_Communications:
            description: '15: Lost Communications'
            implementation: ""
            dependencies: []
            inputs: {}
            timeout: -1
            host: ""
          set_degraded:
            description: '7: Degraded'
            implementation: ""
            dependencies: []
            inputs: {}
            timeout: -1
            host: ""
          set_error_general:
            description: '10: Error - General'
            implementation: ""
            dependencies: []
            inputs: {}
            timeout: -1
            host: ""
          set_error_non_recoverable:
            description: '11: Error - Non Recoverable'
            implementation: ""
            dependencies: []
            inputs: {}
            timeout: -1
            host: ""
          set_initializing:
            description: '2: Initializing'
            implementation: ""
            dependencies: []
            inputs: {}
            timeout: -1
            host: ""
          set_paused:
            description: '4: Paused'
            implementation: ""
            dependencies: []
            inputs: {}
            timeout: -1
            host: ""
          set_predicted_failure:
            description: '9: Predicted Failure'
            implementation: ""
            dependencies: []
            inputs: {}
            timeout: -1
            host: ""
          set_starting:
            description: '3: Starting'
            implementation: ""
            dependencies: []
            inputs: {}
            timeout: -1
            host: ""
          set_stopping:
            description: '5: Stopping'
            implementation: ""
            dependencies: []
            inputs: {}
            timeout: -1
            host: ""
          set_stressed:
            description: '8: Stressed'
            implementation: ""
            dependencies: []
            inputs: {}
            timeout: -1
            host: ""
          set_unable_to_contact:
            description: '14: Unable To Contact'
            implementation: ""
            dependencies: []
            inputs: {}
            timeout: -1
            host: ""
          set_unknown:
            description: '0: Unknown'
            implementation: ""
            dependencies: []
            inputs: {}
            timeout: -1
            host: ""
          start:
            description: '1: OK'
            implementation: ""
            dependencies: []
            inputs: {}
            timeout: -1
            host: ""
          stop:
            description: '6: Stopped'
            implementation: ""
            dependencies: []
            inputs: {}
            timeout: -1
            host: ""
    artifacts: {}
groups: {}
policies: {}
inputs: {}
outputs: {}
workflows:
  create_router:
    description: ""
    preconditions: []
    steps:
      configure_router: {}
      install_router: {}
    inputs: {}
  delete_router:
    description: ""
    preconditions: []
    steps:
      cost_out_routes: {}
      recover_router: {}
      shutdown_router: {}
    inputs: {}
substitution: null
metadata: {}
scriptNamespace:
  concat:
    origin: null
    path: ""
    sourcecode: |-
      // [TOSCA-Simple-Profile-YAML-v1.2] @ 4.3.1
      // [TOSCA-Simple-Profile-YAML-v1.2] @ 4.3.1

      function evaluate() {
        var a = [];
        var length = arguments.length;
        for (var i = 0; i < length; i++) {
          var argument = arguments[i];
          if (argument.$string !== undefined)
            argument = argument.$string;
          a.push(argument);
        }
        return a.join('');
      }
    nativeargumentindexes: []
  equal:
    origin: null
    path: ""
    sourcecode: |-
      // [TOSCA-Simple-Profile-YAML-v1.2] @ 3.6.3
      // [TOSCA-Simple-Profile-YAML-v1.2] @ 3.5.2

      clout.exec('tosca.helpers');

      function validate(v1, v2) {
        if (arguments.length !== 2)
          throw 'must have 1 argument';
        return tosca.getComparable(v1) == tosca.getComparable(v2);
      }
    nativeargumentindexes:
    - 0
  get_artifact:
    origin: null
    path: ""
    sourcecode: |-
      // [TOSCA-Simple-Profile-YAML-v1.2] @ 4.8.1
      // [TOSCA-Simple-Profile-YAML-v1.2] @ 4.8.1

      function evaluate() {
        return 'TODO';
      }
    nativeargumentindexes: []
  get_attribute:
    origin: null
    path: ""
    sourcecode: |-
      // [TOSCA-Simple-Profile-YAML-v1.2] @ 4.5.1
      // [TOSCA-Simple-Profile-YAML-v1.2] @ 4.5.1

      clout.exec('tosca.helpers');

      function evaluate(entity, attribute) {
        var length = arguments.length;
        if (length < 2)
          throw 'must have at least 2 arguments';
        var nodeTemplate = tosca.getNodeTemplate(entity);
        var attributes = nodeTemplate.attributes;
        if (!(attribute in attributes))
          throw puccini.sprintf('attribute "%s" not found in "%s"', attribute, nodeTemplate.name);
        var r = clout.coerce(attributes[attribute]);
        for (var i = 2; i < length; i++)
          r = r[arguments[i]];
        return r;
      }
    nativeargumentindexes: []
  get_input:
    origin: null
    path: ""
    sourcecode: |-
      // [TOSCA-Simple-Profile-YAML-v1.2] @ 4.4.1
      // [TOSCA-Simple-Profile-YAML-v1.2] @ 4.4.1

      clout.exec('tosca.helpers');

      function evaluate(input) {
        if (arguments.length !== 1)
          throw 'must have 1 argument';
        if (!tosca.isTosca(clout))
          throw 'Clout is not TOSCA';
        var inputs = clout.properties.tosca.inputs;
        if (!(input in inputs))
          throw puccini.sprintf('input "%s" not found', input);
        var r = inputs[input];
        r = clout.coerce(r);
        return r;
      }
    nativeargumentindexes: []
  get_nodes_of_type:
    origin: null
    path: ""
    sourcecode: |-
      // [TOSCA-Simple-Profile-YAML-v1.2] @ 4.7.1
      // [TOSCA-Simple-Profile-YAML-v1.2] @ 4.7.1

      clout.exec('tosca.helpers');

      function evaluate(typeName) {
        if (arguments.length !== 1)
          throw 'must have 1 argument';
        var names = [];
        for (var name in clout.vertexes) {
          var vertex = clout.vertexes[name];
          if (tosca.isTosca(vertex))
            names.push(vertex.properties.name);
        }
        return names;
      }
    nativeargumentindexes: []
  get_operation_output:
    origin: null
    path: ""
    sourcecode: |-
      // [TOSCA-Simple-Profile-YAML-v1.2] @ 4.6.1
      // [TOSCA-Simple-Profile-YAML-v1.2] @ 4.6.1

      function evaluate() {
        return 'TODO';
      }
    nativeargumentindexes: []
  get_property:
    origin: null
    path: ""
    sourcecode: |-
      // [TOSCA-Simple-Profile-YAML-v1.2] @ 4.4.2
      // [TOSCA-Simple-Profile-YAML-v1.2] @ 4.4.2

      clout.exec('tosca.helpers');

      function evaluate(entity, property) {
        var length = arguments.length;
        if (length < 2)
          throw 'must have at least 2 arguments';
        var nodeTemplate = tosca.getNodeTemplate(entity);
        var properties = nodeTemplate.properties;
        if (!(property in properties))
          throw puccini.sprintf('property "%s" not found in "%s"', property, nodeTemplate.name);
        var r = clout.coerce(properties[property]);
        for (var i = 2; i < length; i++)
          r = r[arguments[i]];
        return r;
      }
    nativeargumentindexes: []
  greater_or_equal:
    origin: null
    path: ""
    sourcecode: |-
      // [TOSCA-Simple-Profile-YAML-v1.2] @ 3.6.3
      // [TOSCA-Simple-Profile-YAML-v1.2] @ 3.5.2

      clout.exec('tosca.helpers');

      function validate(v1, v2) {
        if (arguments.length !== 2)
          throw 'must have 1 argument';
        return tosca.getComparable(v1) >= tosca.getComparable(v2);
      }
    nativeargumentindexes:
    - 0
  greater_than:
    origin: null
    path: ""
    sourcecode: |-
      // [TOSCA-Simple-Profile-YAML-v1.2] @ 3.6.3
      // [TOSCA-Simple-Profile-YAML-v1.2] @ 3.5.2

      clout.exec('tosca.helpers');

      function validate(v1, v2) {
        if (arguments.length !== 2)
          throw 'must have 1 argument';
        return tosca.getComparable(v1) > tosca.getComparable(v2);
      }
    nativeargumentindexes:
    - 0
  in_range:
    origin: null
    path: ""
    sourcecode: |-
      // [TOSCA-Simple-Profile-YAML-v1.2] @ 3.6.3
      // [TOSCA-Simple-Profile-YAML-v1.2] @ 3.5.2

      clout.exec('tosca.helpers');

      function validate(v, lower, upper) {
        if (arguments.length !== 3)
          throw 'must have 2 arguments';
        v = tosca.getComparable(v);
        return (v >= tosca.getComparable(lower)) && (v <= tosca.getComparable(upper));
      }
    nativeargumentindexes:
    - 0
    - 1
  length:
    origin: null
    path: ""
    sourcecode: |-
      // [TOSCA-Simple-Profile-YAML-v1.2] @ 3.6.3
      // [TOSCA-Simple-Profile-YAML-v1.2] @ 3.5.2

      function validate(v, length) {
        if (arguments.length !== 2)
          throw 'must have 1 argument';
        if (v.$string !== undefined)
          v = v.$string;
        return v.length == length;
      }
    nativeargumentindexes: []
  less_or_equal:
    origin: null
    path: ""
    sourcecode: |-
      // [TOSCA-Simple-Profile-YAML-v1.2] @ 3.6.3
      // [TOSCA-Simple-Profile-YAML-v1.2] @ 3.5.2

      clout.exec('tosca.helpers');

      function validate(v1, v2) {
        if (arguments.length !== 2)
          throw 'must have 1 argument';
        return tosca.getComparable(v1) <= tosca.getComparable(v2);
      }
    nativeargumentindexes:
    - 0
  less_than:
    origin: null
    path: ""
    sourcecode: |-
      // [TOSCA-Simple-Profile-YAML-v1.2] @ 3.6.3
      // [TOSCA-Simple-Profile-YAML-v1.2] @ 3.5.2

      clout.exec('tosca.helpers');

      function validate(v1, v2) {
        if (arguments.length !== 2)
          throw 'must have 1 argument';
        return tosca.getComparable(v1) < tosca.getComparable(v2);
      }
    nativeargumentindexes:
    - 0
  max_length:
    origin: null
    path: ""
    sourcecode: |-
      // [TOSCA-Simple-Profile-YAML-v1.2] @ 3.6.3
      // [TOSCA-Simple-Profile-YAML-v1.2] @ 3.5.2

      function validate(v, length) {
        if (arguments.length !== 2)
          throw 'must have 1 argument';
        if (v.$string !== undefined)
          v = v.$string;
        return v.length <= length;
      }
    nativeargumentindexes: []
  min_length:
    origin: null
    path: ""
    sourcecode: |-
      // [TOSCA-Simple-Profile-YAML-v1.2] @ 3.6.3
      // [TOSCA-Simple-Profile-YAML-v1.2] @ 3.5.2

      function validate(v, length) {
        if (arguments.length !== 2)
          throw 'must have 1 argument';
        if (v.$string !== undefined)
          v = v.$string;
        return v.length >= length;
      }
    nativeargumentindexes: []
  pattern:
    origin: null
    path: ""
    sourcecode: |-
      // [TOSCA-Simple-Profile-YAML-v1.2] @ 3.6.3
      // [TOSCA-Simple-Profile-YAML-v1.2] @ 3.5.2

      function validate(v, re) {
        if (arguments.length !== 2)
          throw 'must have 1 argument';
        if (v.$string !== undefined)
          v = v.$string;
        return new RegExp('^' + re + '$').test(v);
      }
    nativeargumentindexes: []
  schema:
    origin: null
    path: ""
    sourcecode: |-
      // [TOSCA-Simple-Profile-YAML-v1.2] @ 3.6.3

      function validate() {
        // TODO
        return true;
      }
    nativeargumentindexes: []
  token:
    origin: null
    path: ""
    sourcecode: |-
      // [TOSCA-Simple-Profile-YAML-v1.2] @ 4.3.3
      // [TOSCA-Simple-Profile-YAML-v1.2] @ 4.3.2

      function evaluate(v, separators, index) {
        if (arguments.length !== 3)
          throw 'must have 3 arguments';
        if (v.$string !== undefined)
          v = v.$string;
        var s = v.split(new RegExp('[' + escape(separators) + ']'));
        return s[index];
      }

      function escape(s) {
        return s.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
      }
    nativeargumentindexes: []
  tosca.coerce:
    origin:
      path: /tosca/simple/1.1
      data: ""
    path: internal:/tosca/common/1.0/js/coerce.js
    sourcecode: ""
    nativeargumentindexes: []
  tosca.helpers:
    origin:
      path: /tosca/simple/1.1
      data: ""
    path: internal:/tosca/common/1.0/js/helpers.js
    sourcecode: ""
    nativeargumentindexes: []
  tosca.resolve:
    origin:
      path: /tosca/simple/1.1
      data: ""
    path: internal:/tosca/common/1.0/js/resolve.js
    sourcecode: ""
    nativeargumentindexes: []
  tosca.utils:
    origin:
      path: /tosca/simple/1.1
      data: ""
    path: internal:/tosca/common/1.0/js/utils.js
    sourcecode: ""
    nativeargumentindexes: []
  valid_values:
    origin: null
    path: ""
    sourcecode: |-
      // [TOSCA-Simple-Profile-YAML-v1.2] @ 3.6.3
      // [TOSCA-Simple-Profile-YAML-v1.2] @ 3.5.2

      function validate(v) {
        var values = Array.prototype.slice.call(arguments, 1);
        return values.indexOf(v) !== -1;
      }
    nativeargumentindexes: []
